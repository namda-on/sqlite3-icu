name: Build SQLite ICU Extension

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-alpine:
    name: Build Alpine Linux (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
        fail-fast: true
        matrix:
            include:
                - os: ubuntu-24.04
                  arch: amd64
                - os: ubuntu-24.04-arm
                  arch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image and extension
      run: |
        docker buildx build \
          -f Dockerfile.alpine \
          -t sqlite-icu-alpine-${{ matrix.arch }} .

        mkdir -p ${{ github.workspace }}/build
        BUILDER_CID=$(docker create sqlite-icu-alpine-${{ matrix.arch }})
        docker cp "${BUILDER_CID}:/output/." "${{ github.workspace }}/build/"
        docker rm "${BUILDER_CID}"

        ls -al

        tar -czvf libSqliteIcu-alpine-${{ matrix.arch }}.tar.gz -C ${{ github.workspace }}/build libSqliteIcu.so

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sqlite-icu-alpine-${{ matrix.arch }}
        path: libSqliteIcu-alpine-${{ matrix.arch }}.tar.gz
        compression-level: 0
  build-ubuntu:
    name: Build Ubuntu Linux (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
        fail-fast: true
        matrix:
            include:
                - os: ubuntu-24.04
                  arch: amd64
                - os: ubuntu-24.04-arm
                  arch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image and extension
      run: |
        docker buildx build \
          -f Dockerfile.ubuntu \
          -t sqlite-icu-ubuntu-${{ matrix.arch }} .

        mkdir -p ${{ github.workspace }}/build
        BUILDER_CID=$(docker create sqlite-icu-ubuntu-${{ matrix.arch }})
        docker cp "${BUILDER_CID}:/output/." "${{ github.workspace }}/build/"
        docker rm "${BUILDER_CID}"

        tar -czvf libSqliteIcu-ubuntu24.04-${{ matrix.arch }}.tar.gz -C ${{ github.workspace }}/build libSqliteIcu.so

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sqlite-icu-ubuntu-${{ matrix.arch }}
        path: libSqliteIcu-ubuntu24.04-${{ matrix.arch }}.tar.gz
        compression-level: 0

  build-macos:
    name: Build macOS (${{ matrix.arch }})
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        brew update
        brew install icu4c pkg-config sqlite wget

    - name: Build extension
      run: |
        chmod +x ./build-macos.sh
        ARCH=${{ matrix.arch }} ./build-macos.sh

        ls

        tar -czvf libSqliteIcu-darwin-${{ matrix.arch }}.tar.gz libSqliteIcu.dylib

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sqlite-icu-macos-${{ matrix.arch }}
        path: libSqliteIcu-darwin-${{ matrix.arch }}.tar.gz
        compression-level: 0

  create-release:
    name: Create Release
    needs: [build-alpine, build-ubuntu, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          libSqliteIcu-*
        body: |
          # SQLite ICU Extension - Multi-platform builds
          This release contains SQLite ICU extensions built for multiple platforms and architectures.

          ## Available builds:

          ### Linux Alpine (musl libc)
          - x86_64 architecture
          - ARM64 architecture

          ### Linux Ubuntu (glibc)
          - x86_64 architecture
          - ARM64 architecture

          ## Requirements
          - **Alpine Linux**: Requires `icu-libs` package
          - **Ubuntu/Debian**: Requires `libicu` package
          - **macOS**: ICU is included in the system

        draft: true
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}